model User {
  idUsers      String         @id @default(uuid()) @db.Char(36)
  username     String         @db.VarChar(30)
  email        String         @unique @db.VarChar(50)
  profileImg   String?        @db.VarChar(255)
  userPass     String         @db.VarChar(255)
  userDesc     String?        @db.VarChar(255)
  socialLinks  UserSocialLink[]
  preferences  UserMusicPreference[]
  matches1     Match[]        @relation("user1Matches")
  matches2     Match[]        @relation("user2Matches")
  recentAlbums UserAlbum[]    // Relación con álbumes recientes
  playlists    UserPlaylist[] // Relación con playlists
}

model UserSocialLink {
  idLink       String  @id @default(uuid())
  platformName String
  profileLink  String
  userID       String
  user         User    @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
}

model Music {
  idMusic    String                @id @default(uuid())
  songName   String
  preferences UserMusicPreference[]
  matchDetails MatchDetail[]
  artistMusic ArtistMusic[]
}

model Artist {
  idArtist    String                @id @default(uuid())
  artistName  String
  albums      Album[]               // Reverse relation added here
  preferences UserMusicPreference[]
  matchDetails MatchDetail[]
  artistMusic ArtistMusic[]
}

model ArtistMusic {
  id        String  @id @default(uuid())
  artistID  String
  musicID   String
  artist    Artist  @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  music     Music   @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)
  @@unique([artistID, musicID])
}

model Album {
  idAlbum    String  @id @default(uuid()) @db.Char(36)
  albumName  String  @db.VarChar(100)
  artistID   String?
  releaseDate DateTime?
  coverUrl   String? @db.VarChar(255)
  artist     Artist? @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  userAlbums UserAlbum[]
}

model UserAlbum {
  id         String  @id @default(uuid()) @db.Char(36)
  userID     String
  albumID    String
  user       User    @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  album      Album   @relation(fields: [albumID], references: [idAlbum], onDelete: Cascade)
  @@unique([userID, albumID])
}

model Playlist {
  idPlaylist String  @id @default(uuid()) @db.Char(36)
  name       String  @db.VarChar(100)
  coverUrl   String? @db.VarChar(255)
  ownerID    String?
  userPlaylists UserPlaylist[]
}

model UserPlaylist {
  id         String  @id @default(uuid()) @db.Char(36)
  userID     String
  playlistID String
  user       User      @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  playlist   Playlist  @relation(fields: [playlistID], references: [idPlaylist], onDelete: Cascade)
  @@unique([userID, playlistID])
}

model UserMusicPreference {
  idPreference String  @id @default(uuid())
  userID       String
  musicID      String
  artistID     String
  preferenceType String @default("track") // Puede ser 'track', 'artist', etc.
  user         User    @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  music        Music   @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)
  artist       Artist  @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  @@unique([userID, musicID, artistID])
}

model Match {
  idMatch   String         @id @default(uuid())
  user1ID   String
  user2ID   String
  matchDate DateTime       @default(now())
  user1     User           @relation("user1Matches", fields: [user1ID], references: [idUsers], onDelete: Cascade)
  user2     User           @relation("user2Matches", fields: [user2ID], references: [idUsers], onDelete: Cascade)
  details   MatchDetail[]
}

model MatchDetail {
  idDetail  String  @id @default(uuid())
  idMatch   String
  idMusic   String?
  idArtist  String?
  match     Match   @relation(fields: [idMatch], references: [idMatch], onDelete: Cascade)
  music     Music?  @relation(fields: [idMusic], references: [idMusic], onDelete: Cascade)
  artist    Artist? @relation(fields: [idArtist], references: [idArtist], onDelete: Cascade)
  @@unique([idMatch, idMusic, idArtist])
}