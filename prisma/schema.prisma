<<<<<<< HEAD
model User {
  idUsers      String         @id @default(uuid()) @db.Char(36)
  username     String         @db.VarChar(30)
  email        String         @unique @db.VarChar(50)
  profileImg   String?        @db.VarChar(255)
  userPass     String         @db.VarChar(255)
  userDesc     String?        @db.VarChar(255)
  socialLinks  UserSocialLink[]
  preferences  UserMusicPreference[]
  matches1     Match[]        @relation("user1Matches")
  matches2     Match[]        @relation("user2Matches")
  recentAlbums UserAlbum[]    // Relación con álbumes recientes
=======
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  idUsers      String                @id @default(uuid()) @db.Char(36)
  username     String                @db.VarChar(30)
  email        String                @unique @db.VarChar(50)
  profileImg   String?               @db.VarChar(255)
  userPass     String                @db.VarChar(255)
  userDesc     String?               @db.VarChar(255)
  socialLinks  UserSocialLink[]
  preferences  UserMusicPreference[]
  matches1     Match[]               @relation("user1Matches")
  matches2     Match[]               @relation("user2Matches")
  recentAlbums UserAlbum[] // Relación con álbumes recientes
>>>>>>> develop-arturo
  playlists    UserPlaylist[] // Relación con playlists
}

model UserSocialLink {
<<<<<<< HEAD
  idLink       String  @id @default(uuid())
  platformName String
  profileLink  String
=======
  idLink       String @id @default(uuid()) @db.Char(36)
  platformName String @db.VarChar(50)
  profileLink  String @db.VarChar(255)
>>>>>>> develop-arturo
  userID       String
  user         User   @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
}

model Music {
<<<<<<< HEAD
  idMusic    String                @id @default(uuid())
  songName   String
  preferences UserMusicPreference[]
=======
  idMusic      String                @id @default(uuid()) @db.Char(36)
  songName     String                @db.VarChar(100)
  preferences  UserMusicPreference[]
>>>>>>> develop-arturo
  matchDetails MatchDetail[]
  artistMusic  ArtistMusic[]
}

model Artist {
<<<<<<< HEAD
  idArtist    String                @id @default(uuid())
  artistName  String
  albums      Album[]               // Reverse relation added here
  preferences UserMusicPreference[]
=======
  idArtist     String                @id @default(uuid()) @db.Char(36)
  artistName   String                @db.VarChar(100)
  preferences  UserMusicPreference[]
>>>>>>> develop-arturo
  matchDetails MatchDetail[]
  artistMusic  ArtistMusic[]
  albums       Album[]               @relation("ArtistAlbums")
}

model ArtistMusic {
<<<<<<< HEAD
  id        String  @id @default(uuid())
  artistID  String
  musicID   String
  artist    Artist  @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  music     Music   @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)
=======
  id       String @id @default(uuid()) @db.Char(36)
  artistID String
  musicID  String
  artist   Artist @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  music    Music  @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)

>>>>>>> develop-arturo
  @@unique([artistID, musicID])
}

model Album {
<<<<<<< HEAD
  idAlbum    String  @id @default(uuid()) @db.Char(36)
  albumName  String  @db.VarChar(100)
  artistID   String?
  releaseDate DateTime?
  coverUrl   String? @db.VarChar(255)
  artist     Artist? @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
  userAlbums UserAlbum[]
}

model UserAlbum {
  id         String  @id @default(uuid()) @db.Char(36)
  userID     String
  albumID    String
  user       User    @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  album      Album   @relation(fields: [albumID], references: [idAlbum], onDelete: Cascade)
=======
  idAlbum     String      @id @default(uuid()) @db.Char(36)
  albumName   String      @db.VarChar(100)
  artistID    String?
  releaseDate DateTime?
  coverUrl    String?     @db.VarChar(255)
  artist      Artist?     @relation("ArtistAlbums", fields: [artistID], references: [idArtist], onDelete: Cascade)
  userAlbums  UserAlbum[]
}

model UserAlbum {
  id      String @id @default(uuid()) @db.Char(36)
  userID  String
  albumID String
  user    User   @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  album   Album  @relation(fields: [albumID], references: [idAlbum], onDelete: Cascade)

>>>>>>> develop-arturo
  @@unique([userID, albumID])
}

model Playlist {
<<<<<<< HEAD
  idPlaylist String  @id @default(uuid()) @db.Char(36)
  name       String  @db.VarChar(100)
  coverUrl   String? @db.VarChar(255)
  ownerID    String?
=======
  idPlaylist    String         @id @default(uuid()) @db.Char(36)
  name          String         @db.VarChar(100)
  coverUrl      String?        @db.VarChar(255)
  ownerID       String?
>>>>>>> develop-arturo
  userPlaylists UserPlaylist[]
}

model UserPlaylist {
<<<<<<< HEAD
  id         String  @id @default(uuid()) @db.Char(36)
  userID     String
  playlistID String
  user       User      @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  playlist   Playlist  @relation(fields: [playlistID], references: [idPlaylist], onDelete: Cascade)
=======
  id         String   @id @default(uuid()) @db.Char(36)
  userID     String
  playlistID String
  user       User     @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  playlist   Playlist @relation(fields: [playlistID], references: [idPlaylist], onDelete: Cascade)

>>>>>>> develop-arturo
  @@unique([userID, playlistID])
}

model UserMusicPreference {
<<<<<<< HEAD
  idPreference String  @id @default(uuid())
  userID       String
  musicID      String
  artistID     String
  preferenceType String @default("track") // Puede ser 'track', 'artist', etc.
  user         User    @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  music        Music   @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)
  artist       Artist  @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)
=======
  idPreference   String @id @default(uuid()) @db.Char(36)
  userID         String
  musicID        String
  artistID       String
  preferenceType String @default("track") // Puede ser 'track', 'artist', etc.
  user           User   @relation(fields: [userID], references: [idUsers], onDelete: Cascade)
  music          Music  @relation(fields: [musicID], references: [idMusic], onDelete: Cascade)
  artist         Artist @relation(fields: [artistID], references: [idArtist], onDelete: Cascade)

>>>>>>> develop-arturo
  @@unique([userID, musicID, artistID])
}

model Match {
<<<<<<< HEAD
  idMatch   String         @id @default(uuid())
=======
  idMatch   String        @id @default(uuid()) @db.Char(36)
>>>>>>> develop-arturo
  user1ID   String
  user2ID   String
  matchDate DateTime      @default(now())
  user1     User          @relation("user1Matches", fields: [user1ID], references: [idUsers], onDelete: Cascade)
  user2     User          @relation("user2Matches", fields: [user2ID], references: [idUsers], onDelete: Cascade)
  details   MatchDetail[]
}

model MatchDetail {
<<<<<<< HEAD
  idDetail  String  @id @default(uuid())
  idMatch   String
  idMusic   String?
  idArtist  String?
  match     Match   @relation(fields: [idMatch], references: [idMatch], onDelete: Cascade)
  music     Music?  @relation(fields: [idMusic], references: [idMusic], onDelete: Cascade)
  artist    Artist? @relation(fields: [idArtist], references: [idArtist], onDelete: Cascade)
=======
  idDetail String  @id @default(uuid()) @db.Char(36)
  idMatch  String
  idMusic  String?
  idArtist String?
  match    Match   @relation(fields: [idMatch], references: [idMatch], onDelete: Cascade)
  music    Music?  @relation(fields: [idMusic], references: [idMusic], onDelete: Cascade)
  artist   Artist? @relation(fields: [idArtist], references: [idArtist], onDelete: Cascade)

>>>>>>> develop-arturo
  @@unique([idMatch, idMusic, idArtist])
}
