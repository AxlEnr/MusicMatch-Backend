generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @default(uuid()) @db.Char(36)
  username     String             @db.VarChar(30)
  email        String             @unique @db.VarChar(50)
  profileImg   String?            @db.VarChar(255)
  userPass     String             @db.VarChar(255)
  userDesc     String?            @db.VarChar(255)
  socialLinks  UserSocialLink[]
  preferencesMusic  MusicPreference[]
  preferencesArtist ArtistPreference[]
  matches1     Match[]            @relation("user1Matches")
  matches2     Match[]            @relation("user2Matches")
  recentAlbums UserAlbum[]
  playlists    UserPlaylist[]
}

model UserSocialLink {
  id           String @id @default(uuid()) @db.Char(36)
  platformName String @db.VarChar(50)
  profileLink  String @db.VarChar(255)
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MusicPreference {
  id           String             @id @default(uuid()) @db.Char(36)
  songName     String             @db.VarChar(100)
  artistId     String
  artist       ArtistPreference   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchDetails MatchDetail[]
}

model ArtistPreference {
  id           String             @id @default(uuid()) @db.Char(36)
  artistName   String             @db.VarChar(100)
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  musicPrefs   MusicPreference[]
  albums       Album[]
  matchDetails MatchDetail[]
}

model Album {
  id       String            @id @default(uuid()) @db.Char(36)
  name     String            @db.VarChar(100)
  artistId String
  artist   ArtistPreference  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  userAlbums UserAlbum[]
}

model UserAlbum {
  id       String @id @default(uuid()) @db.Char(36)
  userId   String
  albumId  String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@unique([userId, albumId])
}

model Playlist {
  id        String         @id @default(uuid()) @db.Char(36)
  name      String         @db.VarChar(100)
  coverUrl  String?        @db.VarChar(255)
  ownerId   String?
  userPlaylists UserPlaylist[]
}

model UserPlaylist {
  id         String   @id @default(uuid()) @db.Char(36)
  userId     String
  playlistId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
}

model Match {
  id        String        @id @default(uuid()) @db.Char(36)
  user1Id   String
  user2Id   String
  matchDate DateTime      @default(now())
  user1     User          @relation("user1Matches", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User          @relation("user2Matches", fields: [user2Id], references: [id], onDelete: Cascade)
  details   MatchDetail[]
}

model MatchDetail {
  id        String             @id @default(uuid()) @db.Char(36)
  matchId   String
  musicId   String?
  artistId  String?
  match     Match              @relation(fields: [matchId], references: [id], onDelete: Cascade)
  music     MusicPreference?   @relation(fields: [musicId], references: [id], onDelete: Cascade)
  artist    ArtistPreference?  @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([matchId, musicId, artistId])
}
